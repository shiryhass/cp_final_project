;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;; Comp171 - Compiler - Tests

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(load "compiler.scm")	    

(define tests-counter 0)
(define failed-tests-counter 0)

;;;; Configuration
(define show-passed-tests #t)
(define show-summary #t)
(define catch-exceptions #f)

(define try-catch
  (lambda (try-thunk catch-thunk)
    (if catch-exceptions
      (guard (c (else (catch-thunk)))
      (try-thunk))
      (try-thunk))
))
		
(define tests-file->string
  (lambda (in-file)
    (let ((in-port (open-input-file in-file)))
      (letrec ((run
	(lambda ()
	  (let ((ch (read-char in-port)))
	    (if (eof-object? ch)
	      (begin
		(close-input-port in-port)
		'())
	      (cons ch (run)))))))
	(list->string (run))))
))

(define tests-string->file
  (lambda (str out-file)
    (letrec ((out-port (open-output-file out-file))
	  (run (lambda (lst)
		  (if (null? lst) #t
		      (begin (write-char (car lst) out-port)
			     (run (cdr lst)))))))
	(begin
	  (run (string->list str))
	  (close-output-port out-port)))
	    
))

 (define prepare-func
   (lambda (lst)
     (map (lambda (x) (annotate-tc 
 		  (pe->lex-pe
 		    (box-set
 		      (remove-applic-lambda-nil
 			(eliminate-nested-defines
 			  (parse x))))))) lst)
))

(define test-input
  (lambda (input)
    (system "rm -f outResult")
    (system "rm -f outFile")
    (system "rm -f outFile.c")
    (system "rm -f outFile.scm")
    (tests-string->file input "outFile.scm")
    (compile-scheme-file "outFile.scm" "outFile.c")
    (system "gcc -o outFile outFile.c")
    (system "./outFile > outResult")
    (let ((result (tests-file->string "outResult")))
      result)
))

(define test-func
  (lambda (input)
    (system "rm -f outResult")
    (system "rm -f outFile")
    (system "rm -f outFile.c")
    (system "rm -f outFile.scm")
    (tests-string->file input "outFile.scm")
    (compile-scheme-file "outFile.scm" "outFile.c")
    (system "gcc -o outFile outFile.c")
    (system "./outFile > outResult")
    (let ((result (tests-file->string "outResult")))
      (system "rm -f outResult")
      (system "rm -f outFile")
      (system "rm -f outFile.c")
      (system "rm -f outFile.scm")
      result)
))

(define expected-result
  (lambda (input)
    (let* ((exp-res (eval input))
	  (exp-res-str (tests-file->string (tests-string->file exp-res "expRes.scm"))))
      exp-res-str)
))
		
(define assert
	(lambda (input expected-output)
		(set! tests-counter (+ 1 tests-counter))
		(try-catch (lambda ()
		(let ((actual-output (test-func input)))			
			(cond ((equal? actual-output expected-output)
				(if show-passed-tests
				  (begin (display (format "~s) ~a\n" tests-counter input))
				  (display (format "\033[1;32m Success! ☺ \033[0m \n\n")))) 
				  #t)
				(else
				  (set! failed-tests-counter (+ 1 failed-tests-counter))
				  (display (format "~s) ~a\n" tests-counter input))
				  (display (format "\033[1;31mFailed! ☹\033[0m\n\n\033[1;34mExpected:\n ~s\033[0m\n\n\033[1;29mActual:\n ~a\033[0m\n\n" expected-output actual-output))
				#f))))
			(lambda () (set! failed-tests-counter (+ 1 failed-tests-counter))
				(display (format "~s) ~a\n" tests-counter input))
				(display 
				    (format "\n\033[1;31mEXCEPTION OCCURED. PLEASE CHECK MANUALLY THE INPUT:\n ~s\033[0m\n\n" input)) #f))
			))
			
(define runTests
  (lambda (tests-name lst)
	(newline)
	(display tests-name)
	(display ":")
	(newline)
	(display "==============================================")
	(newline)
	(let ((results (map (lambda (x) (assert (car x) (cdr x))) lst)))
	(newline)
	(cond ((andmap (lambda (exp) (equal? exp #t)) results)	
		(display (format "\033[1;32m~s Tests: SUCCESS! ☺ \033[0m\n \n" tests-name)) #t)		
		(else
		(display (format "\033[1;31m~s Tests: FAILED! ☹ \033[0m\n \n" tests-name)) #f)))
))

(define runAllTests
  (lambda (lst)
    (let ((results (map (lambda (test) (runTests (car test) (cdr test))) lst)))
	(if show-summary
	  (begin
	    (display (format "Summary\n=============================\n\033[1;32mPassed: ~s of ~s tests ☺\033[0m\n" (- tests-counter failed-tests-counter) tests-counter))
	    (if (> failed-tests-counter 0)
	      (display (format "\033[1;31mFailed: ~s of ~s tests ☹\033[0m\n\n" failed-tests-counter tests-counter)))))
      	(cond ((andmap (lambda (exp) (equal? exp #t)) results)		
		(display "\033[1;32m!!!!!  ☺  ALL TESTS SUCCEEDED  ☺  !!!!\033[0m\n") #t)
		(else (display "\033[1;31m#####  ☹  SOME TESTS FAILED  ☹  #####\033[0m\n") #f))
		(newline))
))

(define real-tests
  (list

    (cons "((lambda (list) (begin
		(set-cdr! (cdr list) (cons 1 2))
		list)) (list 1 2 3 4))" "(1 . (2 . (1 . 2)))\n") ;TestCase 152

    (cons "(let* ((x 1)
         (y 2)
         (z 3))
    (+ x y z)
    )" "6\n") ;TestCase 153
    (cons "((lambda (x y) (
                 let* ((a x)
                       (b y)
                       )
                 (* a a b))
    ) 44 55)" "106480\n") ;TestCase 154
    (cons "(letrec ((loop (lambda (i a)
		 (set! a (+ (* 10 a) i))
		 (if (< i 10)
		     (loop (+ i 1) a)
		     a))))
  (loop 0 0))" "1234567900\n") ;TestCase 155

    (cons "(define func (lambda (lst num) (
                                  letrec ((loop
                                             (lambda (i a)
                                               (cond ((null? i)
                                                      #f)
                                                 ((eq? (car i) a) #t)
                                                 (else
                                                   (loop (cdr i) a)))
                                               )))
                                    (loop lst num)))
                 )
(func (list 1 2 3) 5)" "#f\n") ;TestCase 156

    (cons "(quasiquote (0 1 2))" "(0 . (1 . (2 . ())))\n") ;TestCase 157
    (cons "(quasiquote (0 (unquote (+ 1 2)) 4))" "(0 . (3 . (4 . ())))\n") ;TestCase 158
    (cons "(quote (1 a (* 4)))" "(1 . (a . ((* . (4 . ())) . ())))\n") ;TestCase 159
    (cons "(define q (quote (bla (((s ) s )sd ))))
q" "(bla . ((((s . ()) . (s . ())) . (sd . ())) . ()))\n") ;TestCase 160
    (cons "(quasiquote (1 2 (unquote (+ 3 4))))" "(1 . (2 . (7 . ())))\n") ;TestCase 161
    (cons "(quasiquote ( a 3 4 (unquote (* 4 3 2 1))))" "(a . (3 . (4 . (24 . ()))))\n") ;TestCase 162
    (cons "`(unquote (quote (3 4 5)))" "(3 . (4 . (5 . ())))\n") ;TestCase 164
    (cons "(let* ((a 1) (b 1) (c (* a b)))
   c)" "1\n") ;TestCase 166
    (cons "(define (lst . x) x)
(lst 1 2 3 4 5 6)" "(1 . (2 . (3 . (4 . (5 . (6 . ()))))))\n") ;TestCase 167
    (cons "(define (func . numbers)
    (if (null? numbers)
        0
        (+ (car numbers) (apply func (cdr numbers)))))
(func 9 8 7 6 5 4)" "39\n") ;TestCase 168
    (cons "(define (f . x) (apply + x))
(f 5 4 8 6)" "23\n") ;TestCase 169
    (cons "5" "5\n") ;TestCase 172
    (cons "(define (plusminus . l)
    (if (null? l) 0
        (if (null? (cdr l)) (car l)
        (+ (- (car l) (car (cdr l))) (apply plusminus (cdr (cdr l)))))))
(plusminus 5 4 8 6 7 2 3 0 5 4 8 9 0)" "11\n") ;TestCase 174
    (cons "(define (less-than  . l)
     (cond
       ((null? l) #t)
       ((null? (cdr l)) #t)
       ((< (car l) (car (cdr l))) (apply less-than  (cdr l)))
       (else #f)))
	   
(less-than 5 4 8 9 6 2 5 4 4 44)" "#f\n") ;TestCase 175
    (cons "(procedure? (lambda () (make-string 5)))" "#t\n") ;TestCase 176
;    (cons "(((((lambda (a)
;      (lambda (b)
;        (((lambda (a) (lambda (b) ((a b) (lambda (x) (lambda (y) y)))))
;	  ((lambda (n)
;	     ((n (lambda (x) (lambda (x) (lambda (y) y))))
;	      (lambda (x) (lambda (y) x))))
;	   (((lambda (a)
;	       (lambda (b)
;		 ((b (lambda (n)
;		       ((lambda (p) (p (lambda (a) (lambda (b) b))))
;			((n (lambda (p)
;			      (((lambda (a)
;				  (lambda (b) (lambda (c) ((c a) b))))
;				((lambda (n)
;				   (lambda (s)
;				     (lambda (z) (s ((n s) z)))))
;				 ((lambda (p)
;				    (p (lambda (a) (lambda (b) a))))
;				  p)))
;			       ((lambda (p)
;				  (p (lambda (a) (lambda (b) a))))
;				p))))
;			 (((lambda (a)
;			     (lambda (b) (lambda (c) ((c a) b))))
;			   (lambda (x) (lambda (y) y)))
;			  (lambda (x) (lambda (y) y)))))))
;		  a)))
;	     a)
;	    b)))
;	 ((lambda (n)
;	    ((n (lambda (x) (lambda (x) (lambda (y) y))))
;	     (lambda (x) (lambda (y) x))))
;	  (((lambda (a)
;	      (lambda (b)
;		((b (lambda (n)
;		      ((lambda (p) (p (lambda (a) (lambda (b) b))))
;		       ((n (lambda (p)
;			     (((lambda (a)
;				 (lambda (b) (lambda (c) ((c a) b))))
;			       ((lambda (n)
;				  (lambda (s)
;				    (lambda (z) (s ((n s) z)))))
;				((lambda (p)
;				   (p (lambda (a) (lambda (b) a))))
;				 p)))
;			      ((lambda (p)
;				 (p (lambda (a) (lambda (b) a))))
;			       p))))
;			(((lambda (a)
;			    (lambda (b) (lambda (c) ((c a) b))))
;			  (lambda (x) (lambda (y) y)))
;			 (lambda (x) (lambda (y) y)))))))
;		 a)))
;	    b)
;	   a)))))
 ;   ((lambda (n)
  ;     ((lambda (p) (p (lambda (a) (lambda (b) b))))
;	((n (lambda (p)
;	      (((lambda (a) (lambda (b) (lambda (c) ((c a) b))))
;		((lambda (n) (lambda (s) (lambda (z) (s ((n s) z)))))
;		 ((lambda (p) (p (lambda (a) (lambda (b) a)))) p)))
;	       (((lambda (a)
;		   (lambda (b)
;		     ((b (a (lambda (a)
;			      (lambda (b)
;				((a (lambda (n)
;				      (lambda (s)
;					(lambda (z) (s ((n s) z))))))
;				 b)))))
;		      (lambda (x) (lambda (y) y)))))
;		 ((lambda (p) (p (lambda (a) (lambda (b) a)))) p))
;		((lambda (p) (p (lambda (a) (lambda (b) b)))) p)))))
;	 (((lambda (a) (lambda (b) (lambda (c) ((c a) b))))
;	   (lambda (x) x))
;	  (lambda (x) x)))))
;      (lambda (x) (lambda (y) (x (x (x (x (x y)))))))))
;    (((lambda (a)
;       (lambda (b)
;	 ((b (a (lambda (a)
;		  (lambda (b)
;		    ((a (lambda (n)
;			  (lambda (s) (lambda (z) (s ((n s) z))))))
;		     b)))))
;	  (lambda (x) (lambda (y) y)))))
 ;    (((lambda (a)
;	 (lambda (b)
;	   ((b (a (lambda (a)
;		    (lambda (b)
;		      ((a (lambda (n)
;			    (lambda (s) (lambda (z) (s ((n s) z))))))
;		       b)))))
;	    (lambda (x) (lambda (y) y)))))
 ;      ((lambda (x) (lambda (y) (x (x (x y)))))
;	(lambda (x) (lambda (y) (x (x y))))))
 ;     (lambda (x) (lambda (y) (x (x (x y)))))))
;    (lambda (x) (lambda (y) (x (x (x (x (x y)))))))))
;  #t)
; #f)" "#t\n") ;TestCase 177
    (cons "((lambda (x) (x x 10000))
 (lambda (x n)
   (if (zero? n) #t
       (x x (- n 1)))))" "#t\n") ;TestCase 178
    (cons "(define not (lambda (x) (if x #f #t)))

(and
 (boolean? #t)
 (boolean? #f)
 (not (boolean? 1234))
 (not (boolean? 'a))
 (symbol? 'b)
 (procedure? procedure?)
 (eq? (car '(a b c)) 'a)
 (= (car (cons 1 2)) 1)
 (integer? 1234)
 (char? #\a)
 (null? '())
 (string? \"abc\")
 (symbol? 'lambda)
 (not (string? 1234))
 (pair? '(a . b))
 (not (pair? '()))
 (zero? 0)
 (not (zero? 234))
 (= 97 (char->integer (string-ref \"abc\" 0)))
 (let ((n 10000))
   (= n (string-length (make-string n))))
 (= 65 (char->integer #\\A))
 (= 3 (remainder 7 4))
 (= 6 (* 1 2 3))
 (= 1 (*))
 (= 234 (* 234))
 (= 6 (+ 1 2 3))
 (zero? (+))
 (= 234 (+ 234))
 (= 1 (- 6 3 2))
 (< 1 2 3 4 5)
 (> 5 4 3 2 1)
 )" "#t\n") ;TestCase 179
    (cons "(define positive? (lambda (n) (> n 0)))
(define even?
  (letrec ((even-1?
	    (lambda (n)
	      (or (zero? n)
		  (odd-2? (- n 1) 'odd-2))))
	   (odd-2?
	    (lambda (n _)
	      (and (positive? n)
		   (even-3? (- n 1) (+ n n) (+ n n n)))))
	   (even-3?
	    (lambda (n _1 _2)
	      (or (zero? n)
		  (odd-5? (- n 1) (+ n n) (* n n) 'odd-5 'odder-5))))
	   (odd-5?
	    (lambda (n _1 _2 _3 _4)
	      (and (positive? n)
		   (even-1? (- n 1))))))
    even-1?))

(even? 100)" "#t\n") ;TestCase 180
    (cons "(let ((a 1))
  (let ((b 2) (c 3))
    (let ((d 4) (e 5) (f 6))
      (= 720 (* a b c d e f)))))" "#t\n") ;TestCase 181

    (cons "(define sum (lambda (n) (/ (* n (+ n 1)) 2)))
(sum 300)" "45150\n") ;TestCase 182
    (cons "(define with (lambda (s f) (apply f s)))
(define fact
  (letrec ((fact-1
	    (lambda (n r)
	      (if (zero? n)
		  r
		  (fact-2 (- n 1)
			  (* n r)
			  'moshe
			  'yosi))))
	   (fact-2
	    (lambda (n r _1 _2)
	      (if (zero? n)
		  r
		  (fact-3 (- n 1)
			  (* n r)
			  'dana
			  'michal
			  'olga
			  'sonia))))
	   (fact-3
	    (lambda (n r _1 _2 _3 _4)
	      (if (zero? n)
		  r
		  (fact-1 (- n 1)
			  (* n r))))))
    (lambda (n)
      (fact-1 n 1))))
(fact 10)" "3628800\n") ;TestCase 183
    (cons "(define with (lambda (s f) (apply f s)))
(define list (lambda args args))
(define fact-1
  (lambda (n)
    (if (zero? n)
	(list 1 'fact-1)
	(with (fact-2 (- n 1))
	  (lambda (r . trail)
	    (cons (* n r)
	      (cons 'fact-1 trail)))))))
(define fact-2
  (lambda (n)
    (if (zero? n)
	(list 1 'fact-2)
	(with (fact-3 (- n 1))
	  (lambda (r . trail)
	    (cons (* n r)
	      (cons 'fact-2 trail)))))))
(define fact-3
  (lambda (n)
    (if (zero? n)
	(list 1 'fact-3)
	(with (fact-1 (- n 1))
	  (lambda (r . trail)
	    (cons (* n r)
	      (cons 'fact-3 trail)))))))
(fact-1 10)" "(3628800 fact-1 fact-2 fact-3 fact-1 fact-2 fact-3 fact-1
  fact-2 fact-3 fact-1 fact-2)\n") ;TestCase 184
    (cons "(+ 1 1/2)" "3/2\n") ;TestCase 185
    (cons "(+ 1/2 1)" "3/2\n") ;TestCase 186
    (cons "(+ 1/3 2/3)" "1\n") ;TestCase 187
    (cons "(+)" "0\n") ;TestCase 188
    (cons "(= (+ (/ 1 3) 5/3 (/ 9 27)) 7/3)" "#t\n") ;TestCase 189
    (cons "(*)" "1\n") ;TestCase 190
    (cons "(or)" "#f\n") ;TestCase 191
    (cons "(and)" "#t\n") ;TestCase 192
    (cons "(+ 3 4 5/4 (* 1000 2/1000) 4/5 3 2 4 3/200)" "4013/200\n") ;TestCase 193
    (cons "(define f (lambda (x) (if (zero? x) x (+ 1 (f (- x 1))))))
(eq? 50 (f 50))" "#t\n") ;TestCase 194
    
))

;;; Tests list for debugging purposes
(define tests
  (list   
))    


(display (format "\033[1mComp171 - Compiler Tests\033[0m\n================================\n"))

(runAllTests
  (list      

      (cons "RealTests" real-tests)
    
      ;(cons "Internal Helper Procedures" internal-helper-procedures-tests)
      ;(cons "Debugging" tests)  
      
))