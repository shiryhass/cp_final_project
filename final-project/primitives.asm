/* RUN-TIME SUPPORT
 * all primitive procedure
 * 
 * 
 PUSH(FP);
 MOV(FP,SP);
//TODO
 POP(FP);
 RETURN;
 * 
 * 
 * Programmers: Shai Demri and Shiry Hasan, 2017
 */


L_IS_SOB_VOID:
PUSH(FP);
MOV(FP, SP);
MOV(R0, FPARG(0));
CMP(IND(R0), T_VOID);
JUMP_EQ(L_IS_SOB_VOID_TRUE);
MOV(R0, IMM(0));
JUMP(L_IS_SOB_VOID_EXIT);
L_IS_SOB_VOID_TRUE:
MOV(R0, IMM(1));
L_IS_SOB_VOID_EXIT:
POP(FP);
RETURN;


L_CONS:
PUSH(FP);
MOV(FP,SP);
PUSH(FPARG(3));
PUSH(FPARG(2));
CALL(MAKE_SOB_PAIR);
DROP(2);
POP(FP);
RETURN; 


L_IS_SOB_PAIR:
PUSH(FP);
MOV(FP, SP);
MOV(R0, FPARG(2));
CMP(IND(R0), T_PAIR);
JUMP_EQ(L_IS_SOB_PAIR_TRUE);
MOV(R0, IMM(SOB_FALSE));
JUMP(L_IS_SOB_PAIR_EXIT);
L_IS_SOB_PAIR_TRUE:
MOV(R0, IMM(SOB_TRUE));
L_IS_SOB_PAIR_EXIT:
POP(FP);
RETURN;


L_CAR:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(2));

MOV(R0,INDD(R0,1));
POP(FP);
RETURN;

L_CDR:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(2));

MOV(R0,INDD(R0,2));
POP(FP);
RETURN;


L_IS_SOB_NIL:
PUSH(FP);
MOV(FP, SP);
MOV(R0, FPARG(0));
CMP(IND(R0), T_NIL);
JUMP_EQ(L_IS_SOB_NIL_TRUE);
MOV(R0, IMM(SOB_FALSE));
JUMP(L_IS_SOB_NIL_EXIT);
L_IS_SOB_NIL_TRUE:
MOV(R0,IMM(SOB_TRUE));
L_IS_SOB_NIL_EXIT:
POP(FP);
RETURN;

L_NOT:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(1));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0,FPARG(2));

CMP(INDD(R0,1),IMM(0));
JUMP_EQ(L_CHANGE);

MOV(INDD(R0,1),IMM(0));
JUMP(L_NOT_DONE);


L_CHANGE:
MOV(INDD(R0,1),IMM(1));
L_NOT_DONE:

POP(FP);
RETURN;


L_IS_SOB_BOOL:
  PUSH(FP);
  MOV(FP, SP);
  MOV(R0, FPARG(2));
  CMP(IND(R0), T_BOOL);
  JUMP_EQ(L_IS_SOB_BOOL_TRUE);
  MOV(R0, IMM(SOB_FALSE));
  JUMP(L_IS_SOB_BOOL_EXIT);
 L_IS_SOB_BOOL_TRUE:
  MOV(R0, IMM(SOB_TRUE));
 L_IS_SOB_BOOL_EXIT:
  POP(FP);
  RETURN;

L_IS_SOB_CHAR:
 PUSH(FP);
 MOV(FP, SP);
 MOV(R0,FPARG(1));
CMP(R0,IMM(1));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
 MOV(R0, FPARG(2));
 CMP(IND(R0), T_CHAR);
 JUMP_EQ(L_IS_SOB_CHAR_TRUE);
  MOV(R0, IMM(SOB_FALSE));
 JUMP(L_IS_SOB_CHAR_EXIT);
L_IS_SOB_CHAR_TRUE:
  MOV(R0, IMM(SOB_TRUE));
L_IS_SOB_CHAR_EXIT:
 POP(FP);
 RETURN;

L_IS_SOB_STRING:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(1));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0,FPARG(2));
CMP(INDD(R0,0),IMM(T_STRING));
JUMP_NE(L_NOT_STRING);
MOV(R0,IMM(SOB_TRUE));
JUMP(L_STRING_DONE);
L_NOT_STRING:
MOV(R0,IMM(SOB_FALSE));
L_STRING_DONE:
POP(FP);
RETURN;

L_IS_SOB_INTEGER:
PUSH(FP);
MOV(FP, SP);
MOV(R0, FPARG(2));
CMP(IND(R0), T_INTEGER);
JUMP_EQ(L_IS_SOB_INTEGER_TRUE);
  MOV(R0, IMM(SOB_FALSE));
JUMP(L_IS_SOB_INTEGER_EXIT);
L_IS_SOB_INTEGER_TRUE:
  MOV(R0, IMM(SOB_TRUE));
L_IS_SOB_INTEGER_EXIT:
POP(FP);
RETURN;


L_IS_SOB_FRACTION:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(1));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0,FPARG(2));
CMP(INDD(R0,0),IMM(T_FRAC));
JUMP_NE(L_NOT_FRACTION);
MOV(R0,IMM(SOB_TRUE));
JUMP(L_FRACTION_DONE);
L_NOT_FRACTION:
MOV(R0,IMM(SOB_FALSE));
L_FRACTION_DONE:
POP(FP);
RETURN;

L_IS_SOB_SYMBOL:
PUSH(FP);
MOV(FP, SP);
MOV(R0, FPARG(2));
CMP(IND(R0), IMM(T_SYMBOL));
JUMP_EQ(L_IS_SYMBOL_TRUE);
MOV(R0, IMM(SOB_FALSE));
JUMP(L_IS_SYMBOL_EXIT);
L_IS_SYMBOL_TRUE:
MOV(R0, IMM(SOB_TRUE));
L_IS_SYMBOL_EXIT:
POP(FP);
RETURN;







L_IS_VECTOR:
PUSH(FP);
MOV(FP,SP);
MOV(R0, FPARG(2));
CMP(IND(R0), T_VECTOR);
JUMP_EQ(L_IS_SOB_VECTOR_TRUE);
  MOV(R0, IMM(SOB_FALSE));
JUMP(L_IS_SOB_VECTOR_EXIT);
L_IS_SOB_VECTOR_TRUE:
  MOV(R0, IMM(SOB_TRUE));

L_IS_SOB_VECTOR_EXIT:
POP(FP);
RETURN;

L_IS_SOB_CLOSURE:
PUSH(FP);
MOV(FP, SP);
MOV(R0, FPARG(2));
CMP(IND(R0), T_CLOSURE);
JUMP_EQ(L_IS_SOB_CLOSURE_TRUE);
MOV(R0, IMM(SOB_FALSE));
JUMP(L_IS_SOB_CLOSURE_EXIT);
L_IS_SOB_CLOSURE_TRUE:
MOV(R0, IMM(SOB_TRUE));
L_IS_SOB_CLOSURE_EXIT:
POP(FP);
RETURN;



L_IS_ZERO:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(1));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0,FPARG(2));
CMP(INDD(R0,0),IMM(T_INTEGER));
JUMP_NE(L_ERROR_NOT_AN_INT);
CMP(INDD(R0,1),IMM(0));
JUMP_NE(L_NOT_ZERO);
MOV(R0,SOB_TRUE);
JUMP(L_ZERO_EXIT);
L_NOT_ZERO:
MOV(R0,SOB_FALSE);
L_ZERO_EXIT:
POP(FP);
RETURN;


L_EQ:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(2));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);

MOV(R1,FPARG(2));
MOV(R2,FPARG(3));
CMP(INDD(R1,0),INDD(R2,0));
JUMP_NE(L_EQ_RETURN_FALSE);
CMP(INDD(R1,0),IMM(T_INTEGER));
JUMP_EQ(L_EQ_VAL_CMP);
CMP(INDD(R1,0),IMM(T_BOOL));
JUMP_EQ(L_EQ_VAL_CMP);
CMP(INDD(R1,0),IMM(T_INTEGER));
JUMP_EQ(L_EQ_VAL_CMP);
CMP(INDD(R1,0),IMM(T_FRAC));
JUMP_EQ(L_EQ_VAL_CMP);
CMP(INDD(R1,0),IMM(T_SYMBOL));
JUMP_EQ(L_EQ_VAL_CMP);
CMP(R1,R2);
JUMP_EQ(L_EQ_RETURN_TRUE);
JUMP(L_EQ_RETURN_FALSE);
L_EQ_VAL_CMP:
CMP(INDD(R1,1),INDD(R2,1));
JUMP_NE(L_EQ_RETURN_FALSE);
JUMP(L_EQ_RETURN_TRUE);

L_EQ_RETURN_TRUE:
MOV(R0,SOB_TRUE);
JUMP(L_EQ_EXIT);

L_EQ_RETURN_FALSE:
MOV(R0,SOB_FALSE);

L_EQ_EXIT:
POP(FP);
RETURN;


L_STRING_LENGTH:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(1));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0,FPARG(2));
CMP(INDD(R0,0),T_STRING);
JUMP_NE(L_ERROR_INCORRECT_TYPE);
MOV(R0,INDD(R0,1));
PUSH(R0);
CALL(MAKE_SOB_INTEGER);
DROP(1);
POP(FP);
RETURN;

L_VECTOR_LENGTH:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(1));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0,FPARG(2));
CMP(INDD(R0,0),T_VECTOR);
JUMP_NE(L_ERROR_INCORRECT_TYPE);
MOV(R0,INDD(R0,1));
PUSH(R0);
CALL(MAKE_SOB_INTEGER);
DROP(1);
POP(FP);
RETURN;


L_CHAR_TO_INTEGER:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(1));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0,FPARG(2));
CMP(INDD(R0,0),T_CHAR);
JUMP_NE(L_ERROR_INCORRECT_TYPE);
MOV(R0,INDD(R0,1));
PUSH(R0);
CALL(MAKE_SOB_INTEGER);
DROP(1);
POP(FP);
RETURN;


L_INTEGER_TO_CHAR:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(1));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0,FPARG(2));
CMP(INDD(R0,0),T_INTEGER);
JUMP_NE(L_ERROR_INCORRECT_TYPE);
MOV(R0,INDD(R0,1));
PUSH(R0);
CALL(MAKE_SOB_CHAR);
DROP(1);
POP(FP);
RETURN;










L_SET_CAR:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(2));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0,FPARG(2));
CMP(INDD(R0,0),T_PAIR);
JUMP_NE(L_ERROR_INCORRECT_TYPE);
MOV(INDD(R0,1),FPARG(3));
MOV(R0,SOB_VOID);
POP(FP);
RETURN;


L_SET_CDR:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(2));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0,FPARG(2));
CMP(INDD(R0,0),T_PAIR);
JUMP_NE(L_ERROR_INCORRECT_TYPE);
MOV(INDD(R0,2),FPARG(3));
MOV(R0,SOB_VOID);
POP(FP);
RETURN;

L_STRING_REF:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(2));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0,FPARG(2));
CMP(INDD(R0,0),T_STRING);
JUMP_NE(L_ERROR_INCORRECT_TYPE);
MOV(R1,FPARG(3));
CMP(INDD(R1,0),T_INTEGER);
JUMP_NE(L_ERROR_INCORRECT_TYPE);
MOV(R1,INDD(R1,1));
ADD(R1,2); /*because we need to skeep T_type and the lengeth*/
PUSH(INDD(R0,R1));
CALL(MAKE_SOB_CHAR);
DROP(1);
POP(FP);
RETURN;


L_VECTOR_REF:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(2));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0,FPARG(2));
CMP(INDD(R0,0),T_VECTOR);
JUMP_NE(L_ERROR_INCORRECT_TYPE);
MOV(R1,FPARG(3));
CMP(INDD(R1,0),T_INTEGER);
JUMP_NE(L_ERROR_INCORRECT_TYPE);
MOV(R1,INDD(R1,1));
ADD(R1,2);/*because we need to skeep T_type and the lengeth*/
MOV(R0,INDD(R0,R1));
POP(FP);
RETURN;


L_VECTOR_SET:/*recive @vector @index and @elment*/
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(3));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);

MOV(R0,FPARG(2));/*@vector*/
CMP(INDD(R0,0),T_VECTOR);
JUMP_NE(L_ERROR_INCORRECT_TYPE);

MOV(R1,FPARG(3));/*@index*/
CMP(INDD(R1,0),T_INTEGER);
JUMP_NE(L_ERROR_INCORRECT_TYPE);
CMP(INDD(R0,1),INDD(R1,1));/*compare @vector length and @index*/
JUMP_LT(L_ERROR_INCORRECT_INDEX);

MOV(R1,INDD(R1,1));
ADD(R1,2);
MOV(R2,FPARG(4));
MOV(INDD(R0,R1),R2);
MOV(R0,SOB_VOID);
POP(FP);
RETURN;

L_STRING_SET:/*recive @string @index and @elment*/
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(3));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);

MOV(R0,FPARG(2));/*@string*/
CMP(INDD(R0,0),T_STRING);
JUMP_NE(L_ERROR_INCORRECT_TYPE);

MOV(R1,FPARG(3));/*@index*/
CMP(INDD(R1,0),T_INTEGER);
JUMP_NE(L_ERROR_INCORRECT_TYPE);
CMP(INDD(R0,1),INDD(R1,1));/*compare @string-length and @index*/
JUMP_LT(L_ERROR_INCORRECT_INDEX);

MOV(R1,INDD(R1,1));
ADD(R1,2);
MOV(R2,FPARG(4));
MOV(R2,INDD(R2,1));
MOV(INDD(R0,R1),R2);
MOV(R0,SOB_VOID);
POP(FP);
RETURN;


L_IS_NUMBER:
L_IS_RATIONAL:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(1));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0,FPARG(2));
CMP(INDD(R0,0),IMM(T_FRAC));
JUMP_EQ(RET_TRUE);
CMP(INDD(R0,0),IMM(T_INTEGER));
JUMP_EQ(RET_TRUE);
MOV(R0,SOB_FALSE);
JUMP(L_IS_NUMBER_FRACTION_EXIT);
RET_TRUE:
MOV(R0,SOB_TRUE);
L_IS_NUMBER_FRACTION_EXIT:
POP(FP);
RETURN;

L_VECTOR:
PUSH(FP);
MOV(FP,SP);
MOV(R2,FPARG(1));
MOV(R3,IMM(0)); // i <- 0
MOV(R4,2);  //R4 the current arg
L_VECTOR_BEGIN:
CMP(R3,R2);
JUMP_EQ(L_VECTOR_DONE);
PUSH(FPARG(R4));
ADD(R3,1);
ADD(R4,1);
JUMP(L_VECTOR_BEGIN);
L_VECTOR_DONE:  
PUSH(R2);
CALL(MAKE_SOB_VECTOR);
POP(R2);
DROP(R2);
POP(FP);
RETURN;

L_MAKE_STRING:
PUSH(FP);
MOV(FP,SP);
CMP(FPARG(1),2);
JUMP_EQ(L_TWO_CASE);
CMP(FPARG(1),1);
JUMP_EQ(L_ONE_CASE);
JUMP(L_ERROR_INCORRECT_NUM_OF_ARGS);

L_TWO_CASE:
MOV(R1,FPARG(2));
CMP(IND(R1),T_INTEGER);
JUMP_NE(L_ERROR_INCORRECT_TYPE);
MOV(R2,FPARG(3));
CMP(IND(R2),T_CHAR);
JUMP_NE(L_ERROR_INCORRECT_TYPE);
MOV(R1, INDD(R1,1));
MOV(R2, INDD(R2,1));
JUMP(L_STRING_BEGIN);

L_ONE_CASE:
MOV(R1,FPARG(2));
CMP(IND(R1),T_INTEGER);
JUMP_NE(L_ERROR_INCORRECT_TYPE);
MOV(R1, INDD(R1,1));
MOV(R2, 0);


L_STRING_BEGIN:
CMP(R1,0);
JUMP_EQ(L_STRING_DONE1);
PUSH(R2);
DECR(R1);
JUMP(L_STRING_BEGIN);
L_STRING_DONE1:
MOV(R0,FPARG(2));
PUSH(INDD(R0,1));
CALL(MAKE_SOB_STRING);
POP(R1);
DROP(R1);
POP(FP);
RETURN;



L_MAKE_VECTOR:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(1));
JUMP_EQ(L_ONE_ARG_CASE);

CMP(R0,IMM(2));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);

MOV(R0,FPARG(2));
CMP(INDD(R0,0) , IMM(T_INTEGER));
JUMP_NE(L_ERROR_INCORRECT_TYPE);

MOV(R0,INDD(R0,1));/*how many*/
MOV(R2, R0);
MOV(R1,FPARG(3));/*THE THING IN THE VEC*/

L_MAKE_VEC_BEGIN:
CMP(R0,IMM(0));
JUMP_EQ(L_MAKE_VEC_DONE);
PUSH(R1);
ADD(R0,IMM(-1));
JUMP(L_MAKE_VEC_BEGIN);
L_MAKE_VEC_DONE:
PUSH(R2);
CALL(MAKE_SOB_VECTOR);
POP(R3);
DROP(R3);
JUMP(L_MAKE_VEC_EXIT);

L_ONE_ARG_CASE:
MOV(R0,FPARG(2));
CMP(INDD(R0,0) , IMM(T_INTEGER));
JUMP_NE(L_ERROR_INCORRECT_TYPE);
MOV(R0,INDD(R0,1));/*how many*/
MOV(R2, R0);
MOV(R1,FPARG(2));/*THE THING IN THE VEC*/
MOV(INDD(R1,1),IMM(0));
JUMP(L_MAKE_VEC_BEGIN);


L_MAKE_VEC_EXIT:
POP(FP);
RETURN;





L_NUMERATOR:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(1));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0,FPARG(2));

MOV(R0,INDD(R0,1));
PUSH(R0);
CALL(MAKE_SOB_INTEGER);
DROP(1);
POP(FP);
RETURN;

L_DENOMINATOR:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(R0,IMM(1));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0, FPARG(2));
 CMP(IND(R0),T_INTEGER);
  JUMP_EQ(L_DENOMINATOR_INT_CASE);
MOV(R0,FPARG(2));
MOV(R0,INDD(R0,2));
L_DENOMINATOR_FRAC:
PUSH(R0);
CALL(MAKE_SOB_INTEGER);
DROP(1);
JUMP(L_DENOMINATOR_EXIT);
L_DENOMINATOR_INT_CASE:
 MOV(R0, IMM(1));

JUMP(L_DENOMINATOR_FRAC);

L_DENOMINATOR_EXIT:
POP(FP);
RETURN;



L_REMANIDER:
PUSH(FP);
MOV(FP,SP);
MOV(R0,FPARG(1));
CMP(IMM(2),R0);
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R0,FPARG(2));
CMP(INDD(R0,0),IMM(T_INTEGER));
JUMP_NE(L_ERROR_INCORRECT_TYPE_IN_REM);
MOV(R1,FPARG(3));
CMP(INDD(R1,0),IMM(T_INTEGER));
JUMP_NE(L_ERROR_INCORRECT_TYPE_IN_REM);
MOV(R0,INDD(R0,1));
MOV(R1,INDD(R1,1));
REM(R0,R1);
PUSH(R0);
CALL(MAKE_SOB_INTEGER);
DROP(1);
POP(FP);
RETURN;

L_GCD:
PUSH(R1);
PUSH(R2);
MOV(R0, STARG(2)); //a
MOV(R1, STARG(3)); //b

L_GCD_LOOP:

CMP(R1,IMM(0));
JUMP_EQ(L_GCD_FINISH);
REM(R0,R1); // R0 <- a%b
MOV(R2,R0); // tmp <- a%b
MOV(R0,R1);
MOV(R1,R2);
JUMP(L_GCD_LOOP);
L_GCD_FINISH:
POP(R2);
POP(R1);
RETURN;


L_PLUS:

PUSH(FP);
MOV(FP,SP);
MOV(R0,IMM(0));  
MOV(R1,IMM(1)); 
MOV(R2,FPARG(1));
MOV(R3,IMM(0)); 
MOV(R4,R2);
ADD(R4,1);  

L_PLUS_LOOP_BEGIN:
CMP(R3,R2);
JUMP_EQ(L_PLUS_LOOP_DONE);
MOV(R5,FPARG(R4));  
MOV(R6,INDD(R5,1)); 
MOV(R7,IMM(1)); 
CMP(IND(R5),T_INTEGER);
JUMP_EQ(L_PLUS_JUMP);
MOV(R7,INDD(R5,2));
L_PLUS_JUMP:
MUL(R6,R1);  
MUL(R0,R7); 
MUL(R1,R7);
ADD(R0,R6);
PUSH(R0);
PUSH(R1);
CALL(L_GCD);
MOV(R5,R0);
POP(R1);
POP(R0);
DIV(R0,R5);
DIV(R1,R5);
ADD(R3,1);
SUB(R4,1);
JUMP(L_PLUS_LOOP_BEGIN);
L_PLUS_LOOP_DONE:  

CMP(R1,IMM(1));
JUMP_EQ(L_PLUS_INT_CASE);
CMP(R1,IMM(-1));
JUMP_NE(L_PLUS_FRAC_CASE);
MUL(R0,IMM(-1));
JUMP(L_PLUS_INT_CASE);
L_PLUS_FRAC_CASE:
PUSH(R1);
PUSH(R0);
CALL(MAKE_SOB_FRAC);
DROP(2);
JUMP(L_PLUS_EXIT);
L_PLUS_INT_CASE:
PUSH(R0);
CALL(MAKE_SOB_INTEGER);
DROP(1);
L_PLUS_EXIT:
POP(FP);
RETURN;












L_MINUS:
PUSH(FP);
MOV(FP,SP);

MOV(R2,FPARG(1)); 

CMP(R2,1);
JUMP_EQ(L_MINUS_ONE_ARG_CASE);

MOV(R1,FPARG(2));
MOV(R0,INDD(R1,1)); 

CMP(INDD(R1,0),T_FRAC);
JUMP_NE(L_MINUS_IS_INT);

MOV(R1,INDD(R1,2));
JUMP(L_MINUS_LOOP_INIT);
L_MINUS_IS_INT:
MOV(R1,IMM(1));
L_MINUS_LOOP_INIT:

MOV(R4,R2);
MOV(R3,IMM(1));

INCR(R4);  
L_MINUS_LOOP_BEGIN:
CMP(R3,R2);
JUMP_EQ(L_MINUS_LOOP_DONE);
MOV(R12,FPARG(R4));
MOV(R6,INDD(R12,1)); 
MOV(R11,IMM(1)); 
CMP(IND(R12),T_INTEGER);
JUMP_EQ(L_MINUS_INT);
MOV(R11,INDD(R12,2)); 
L_MINUS_INT:
MUL(R6,R1); 
MUL(R0,R11); 
MUL(R1,R11);
SUB(R0,R6);
PUSH(R0);
PUSH(R1);
CALL(L_GCD);
MOV(R12,R0);
POP(R1);
POP(R0);
DIV(R0,R12);
DIV(R1,R12);
INCR(R3);
DECR(R4);
JUMP(L_MINUS_LOOP_BEGIN);
L_MINUS_LOOP_DONE:  
CMP(R1,IMM(1));
JUMP_EQ(L_MINUS_MAKE_INT);
CMP(R1,IMM(-1));
JUMP_NE(L_MINUS_MAKE_FRAC);
MUL(R0,IMM(-1));
JUMP(L_MINUS_MAKE_INT);
L_MINUS_MAKE_FRAC:
PUSH(R1);
PUSH(R0);
CALL(MAKE_SOB_FRAC);
DROP(2);
JUMP(L_MINUS_EXIT);
L_MINUS_MAKE_INT:
PUSH(R0);
CALL(MAKE_SOB_INTEGER);
DROP(1);
JUMP(L_MINUS_EXIT);


L_MINUS_ONE_ARG_CASE:
MOV(R0,IMM(0));
MOV(R1,INDD(FPARG(2),1));
SUB(R0,R1);
PUSH(R0);
CALL(MAKE_SOB_INTEGER);
DROP(1);

L_MINUS_EXIT:
POP(FP);
RETURN;































L_SYMBOL_TO_STRING:
PUSH(FP);
MOV(FP,SP);
MOV(R1,FPARG(1));
CMP(R1,IMM(1));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R1,FPARG(2));
CMP(INDD(R1,0),IMM(T_SYMBOL));
JUMP_NE(L_ERROR_INCORRECT_TYPE);
MOV(R0,INDD(R1,1));
POP(FP);
RETURN;


L_LT:
PUSH(FP);
MOV(FP,SP);
MOV(R2,FPARG(1)); //NUM OF ARGS
CMP(R2,0);
JUMP_EQ(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R2,FPARG(2));
MOV(R0,INDD(R2,1)); //NUMERATOR 
MOV(R1,IMM(1)); //DENOMINATOR
CMP(IND(R2),T_FRAC);
JUMP_NE(L_LT_IS_INT)
MOV(R1,INDD(R2,2)); //DENOMINATOR

L_LT_IS_INT:
MOV(R2,FPARG(1)); // NUM OF ARGS
MOV(R3,IMM(1)); // COUNTER
MOV(R4,3);  //R4 THE ARGUMENT

L_LT_BEGIN:
CMP(R3,R2);
JUMP_EQ(L_LT_TRUE);

MOV(R5,FPARG(R4));
MOV(R6,INDD(R5,1)); //ANOTHER NUMERATOR
MOV(R7,IMM(1)); //ANOTHER DENOMINATOR
CMP(IND(R5),T_FRAC);
JUMP_NE(L_LT_IS_INT2)
MOV(R7,INDD(R5,2)); //ANOTHER DENOMINATOR

L_LT_IS_INT2:
MUL(R0,R7);
MOV(R8,R6);
MUL(R8,R1);
CMP(R0,R8);
JUMP_GE(L_LT_FALSE);
MOV(R0,R6);
MOV(R1,R7);
ADD(R3,1);
ADD(R4,1);
JUMP(L_LT_BEGIN);

L_LT_TRUE:  
MOV(R0,SOB_TRUE);
JUMP(L_LT_DONE);

L_LT_FALSE:  
MOV(R0,SOB_FALSE);

L_LT_DONE:
POP(FP);
RETURN;

L_GT:
PUSH(FP);
MOV(FP,SP);
MOV(R2,FPARG(1)); //NUM OF ARGS
CMP(R2,0);
JUMP_EQ(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R2,FPARG(2));
MOV(R0,INDD(R2,1)); //NUMERATOR 
MOV(R1,IMM(1)); //DENOMINATOR
CMP(IND(R2),T_FRAC);
JUMP_NE(L_GT_IS_INT)
MOV(R1,INDD(R2,2)); //DENOMINATOR

L_GT_IS_INT:
MOV(R2,FPARG(1)); // NUM OF ARGS
MOV(R3,IMM(1)); // COUNTER
MOV(R4,3);  //R4 THE ARGUMENT

L_GT_BEGIN:
CMP(R3,R2);
JUMP_EQ(L_LT_TRUE);

MOV(R5,FPARG(R4));
MOV(R6,INDD(R5,1)); //ANOTHER NUMERATOR
MOV(R7,IMM(1)); //ANOTHER DENOMINATOR
CMP(IND(R5),T_FRAC);
JUMP_NE(L_GT_IS_INT2)
MOV(R7,INDD(R5,2)); //ANOTHER DENOMINATOR

L_GT_IS_INT2:
MUL(R0,R7);
MOV(R8,R6);
MUL(R8,R1);
CMP(R0,R8);
JUMP_LE(L_GT_FALSE);
MOV(R0,R6);
MOV(R1,R7);
ADD(R3,1);
ADD(R4,1);
JUMP(L_GT_BEGIN);

L_GT_TRUE:  
MOV(R0,SOB_TRUE);
JUMP(L_GT_DONE);

L_GT_FALSE:  
MOV(R0,SOB_FALSE);

L_GT_DONE:
POP(FP);
RETURN;



L_CREATE_THE_INVERSE: ;/*EG. 2->1\2*/
PUSH(FP);
MOV(FP,SP);
MOV(R1,FPARG(2));
MOV(R1,INDD(R1,1));
PUSH(R1);
PUSH(1);
CALL(MAKE_SOB_FRAC);
DROP(2);
POP(FP);
RETURN;


L_MUL:
PUSH(FP);
MOV(FP,SP);
MOV(R0,IMM(1)); //mone  
MOV(R1,IMM(1)); //mehane
MOV(R2,FPARG(1)); // the number of args
MOV(R3,IMM(0)); // i <- 0
MOV(R4,R2);
ADD(R4,1);  //R4 the current arg

L_MUL_LOOP_BEGIN:
CMP(R3,R2);
JUMP_EQ(L_MUL_LOOP_DONE);
MOV(R5,FPARG(R4));   
MUL(R0,INDD(R5,1)); 
CMP(IND(R5),T_INTEGER);
JUMP_EQ(L_MUL_JUMP);
MUL(R1,INDD(R5,2)); 

L_MUL_JUMP:
PUSH(R0);
PUSH(R1);
CALL(L_GCD);
MOV(R5,R0);
POP(R1);
POP(R0);
DIV(R0,R5);
DIV(R1,R5);
ADD(R3,1);
SUB(R4,1);
JUMP(L_MUL_LOOP_BEGIN);

L_MUL_LOOP_DONE:  
CMP(R1,IMM(1));
JUMP_EQ(L_MUL_INT_CASE);
CMP(R1,IMM(-1));
JUMP_NE(L_MUL_FRAC_CASE);
MUL(R0,IMM(-1));
JUMP(L_MUL_INT_CASE);

L_MUL_FRAC_CASE:
PUSH(R1);
PUSH(R0);
CALL(MAKE_SOB_FRAC);
DROP(2);
JUMP(L_MUL_EXIT);

L_MUL_INT_CASE:
PUSH(R0);
CALL(MAKE_SOB_INTEGER);
DROP(1);

L_MUL_EXIT:
POP(FP);
RETURN;






L_DIV:
PUSH(FP);
MOV(FP,SP);
MOV(R3, FPARG(1)); /* NUM OF ARGS*/
CMP(R3, IMM(0));
JUMP_EQ(L_ERROR_INCORRECT_NUM_OF_ARGS);

MOV(R5, FPARG(2));
CMP(IND(R5), T_INTEGER);
JUMP_EQ(L_FIRST_NUM_IS_INTEGER);
CMP(IND(R5), T_FRAC);
JUMP_EQ(L_FIRST_NUM_IS_FRACTION);
JUMP(L_ERROR_INCORRECT_TYPE);

L_FIRST_NUM_IS_INTEGER:
MOV(R1, INDD(R5,1)); /*initiat*/
MOV(R2, IMM(1)); /*initiat*/
JUMP(L_ONE_ARG_CASE_DIV);

L_FIRST_NUM_IS_FRACTION:
MOV(R1, INDD(R5,1)); /*initiat*/
MOV(R2, INDD(R5,2)); /*initiat*/


L_ONE_ARG_CASE_DIV:
CMP(R3, IMM(1)); /*if have only one arg*/
JUMP_NE(L_init);
MOV(R3,R2);
MOV(R2,R1);
MOV(R1,R3);
JUMP(L_DIV_FINISH);

L_init:
MOV(R4, IMM(3));
ADD(R3, IMM(2));
CMP(R3, IMM(3));
JUMP_EQ(L_DIV_FINISH);

L_DIV_LOOP_BEGIN:
MOV(R5, FPARG(R4));
CMP(IND(R5), T_INTEGER);
JUMP_EQ(L_DIV_INT);
CMP(IND(R5), T_FRAC);
JUMP_EQ(L_DIV_FRAC);
JUMP(L_ERROR_INCORRECT_TYPE);

L_DIV_INT:
MUL(R2, INDD(R5,1));
JUMP(L_DIV_REDUC);

L_DIV_FRAC:
MUL(R2, INDD(R5,1));
MUL(R1, INDD(R5,2));


L_DIV_REDUC:
CMP(R2, IMM(1));
JUMP_EQ(L_DIV_STRANGERS);
PUSH(R2);
PUSH(R1);
CALL(L_GCD);
DROP(2);
CMP(R0,IMM(1));
JUMP_EQ(L_DIV_STRANGERS);
DIV(R1, R0);
DIV(R2, R0);

L_DIV_STRANGERS:
INCR(R4);
CMP(R4, R3);
JUMP_NE(L_DIV_LOOP_BEGIN);

L_DIV_FINISH:
CMP(R2,IMM(0)); /*check if denominator is negetive*/
JUMP_GT(L_MEHANA_IS_PLUS);
MUL(R1, (IMM(-1)));
MUL(R2, (IMM(-1)));

L_MEHANA_IS_PLUS:
CMP(R2, IMM(1));
JUMP_EQ(L_DIV_ANS_IS_INT);
PUSH(3);
CALL(MALLOC);
DROP(1);
MOV(INDD(R0,0), T_FRAC);
MOV(INDD(R0,1), R1);
MOV(INDD(R0,2), R2);
JUMP(L_DIV_EXIT);

L_DIV_ANS_IS_INT:
PUSH(2);
CALL(MALLOC);
DROP(1);
MOV(INDD(R0,0), T_INTEGER);
MOV(INDD(R0,1), R1);

L_DIV_EXIT:
POP(FP);
RETURN;




L_SHAVE:
PUSH(FP);
MOV(FP,SP);

MOV(R1, FPARG(1)); /* number of args to compute*/
CMP(R1, IMM(0));
JUMP_EQ(L_ERROR_INCORRECT_NUM_OF_ARGS);
PUSH(FPARG(2));
PUSH(IMM(1)); /*the number of args, because this function is for scheme*/
PUSH(IMM(0)); /*fake env*/
CALL(L_IS_NUMBER);
DROP(3);
CMP(R0,SOB_FALSE);
JUMP_EQ(L_ERROR_NOT_NUMBER1);
CMP(R1, IMM(1));/*IF ONLY ONE NUM IT MUST BE TRUE!*/
JUMP_EQ(L_SHAVE_RETURN_TRUE);

L_MORE_THEN_ONE_ARG_SHAVE_CASE:
/*check all args are numbers*/
MOV(R2, R1); /*number of args*/
ADD(R2,IMM(2));
MOV(R3, IMM(3));
L_CHECK_IF_ALL_ARGS_ARE_NUM:
PUSH(FPARG(R3));
PUSH(IMM(1)); /*the number of args, because this function is for scheme*/ 
PUSH(IMM(0)); /*fake env*/
CALL(L_IS_NUMBER);
DROP(3);
CMP(R0,SOB_FALSE);
JUMP_EQ(L_ERROR_NOT_NUMBER22);
INCR(R3);
CMP(R3, R2);
JUMP_NE(L_CHECK_IF_ALL_ARGS_ARE_NUM);
/*done checking*/

MOV(R2, FPARG(2)); /*we wiil compare with R2*/
MOV(R3, IMM(3));
ADD(R1, IMM(2));
CMP(IND(R2), T_INTEGER);
JUMP_EQ(L_SHAVE_WITH_INTEGER);

L_SHAVE_WITH_FRAC:
MOV(R0, FPARG(R3));
CMP(IND(R0), T_INTEGER);
JUMP_EQ(L_SHAVE_RETURN_FALSE);
CMP(INDD(R0,1), INDD(R2,1));
JUMP_NE(L_SHAVE_RETURN_FALSE);
CMP(INDD(R0,2), INDD(R2,2));
JUMP_NE(L_SHAVE_RETURN_FALSE);
INCR(R3);
CMP(R1, R3);
JUMP_EQ(L_SHAVE_RETURN_TRUE);
JUMP(L_SHAVE_WITH_FRAC);


L_SHAVE_WITH_INTEGER:
MOV(R0, FPARG(R3));
CMP(IND(R0), T_FRAC);
JUMP_EQ(L_SHAVE_RETURN_FALSE);
CMP(INDD(R0,1), INDD(R2,1));
JUMP_NE(L_SHAVE_RETURN_FALSE);
INCR(R3);
CMP(R1, R3);
JUMP_EQ(L_SHAVE_RETURN_TRUE);
JUMP(L_SHAVE_WITH_INTEGER);

L_SHAVE_RETURN_FALSE:
MOV(R0, SOB_FALSE);
JUMP(L_SHAVE_EXIT);

L_SHAVE_RETURN_TRUE:
MOV(R0, SOB_TRUE);

L_SHAVE_EXIT:
POP(FP);
RETURN;












L_STRING_COMPARE:
PUSH(FP);
MOV(FP,SP);
PUSH(R3);
PUSH(R4);
PUSH(R5);
PUSH(R6);
PUSH(R7);
MOV(R3,FPARG(1));
CMP(R3,IMM(2));
JUMP_NE(L_ERROR_INCORRECT_NUM_OF_ARGS);
MOV(R3,FPARG(2));
MOV(R4,FPARG(3)); 
CMP(INDD(R3,1) ,INDD(R4,1));
JUMP_NE(L_STRING_COMPARE_RETURN_FALSE);
MOV(R5,INDD(R3,1));/*STRING LENGTH*/
MOV(R6,IMM(0));
MOV(R7,IMM(2));
L_STRING_COMPARE_LOOP_BEGIN:
CMP(R5,R6);
JUMP_EQ(L_STRING_COMPARE_RETURN_TRUE);
CMP(INDD(R3,R7),INDD(R4,R7));
JUMP_NE(L_STRING_COMPARE_RETURN_FALSE);
INCR(R7);
INCR(R6);
JUMP(L_STRING_COMPARE_LOOP_BEGIN);

L_STRING_COMPARE_RETURN_TRUE:
MOV(R0,SOB_TRUE); 
JUMP(L_STRING_COMPARE_EXIT);
 
L_STRING_COMPARE_RETURN_FALSE: 
PUSH(2)
CALL(MALLOC)
DROP(1)
MOV(IND(R0),IMM(T_BOOL));
MOV(INDD(R0,1),IMM(0)); 

L_STRING_COMPARE_EXIT:
POP(R7);
POP(R6);
POP(R5);
POP(R4);
POP(R3);
POP(FP);
RETURN;




L_APPLY:
PUSH(FP);
MOV(FP,SP);
MOV(R7,FPARG(2));
MOV(R4,IMM(0)); /*R4 <- 0 counter*/
MOV(R3,FPARG(3)); /*s <- list of args */ 
label_push_args_start:
CMP(INDD(R3,2), 3) ; 
JUMP_EQ(label_push_args_end);
PUSH(INDD(R3,1));
MOV(R3,INDD(R3,2)) ;
INCR(R4);
JUMP(label_push_args_start);
label_push_args_end:
PUSH(INDD(R3,1));
INCR(R4);
PUSH(R4);
PUSH(INDD(R7,1));
PUSH(FPARG(-1));
PUSH(FPARG(-2));
MOV(R5, IMM(-3)); /*R5 pointer to the beginning to drop*/
MOV(R6,FPARG(1)); /*pointer to the bottom */ 
INCR(R6);
MOV(R12,R4);
ADD(R12,4);
L_DOWN_ARGS_START:
CMP(R12,IMM(0));
JUMP_EQ(L_DOWN_ARGS_END);
MOV(FPARG(R6),FPARG(R5));
DECR(R6);
DECR(R5);
DECR(R12);
JUMP(L_DOWN_ARGS_START);
L_DOWN_ARGS_END:
MOV(R12,R4);
ADD(R12,4);
DROP(7);
MOV(FP,SP);
MOV(R8,FPARG(0)); /*COUNTER DOWN*/ 
DIV(R8,2);
MOV(R10,FPARG(0));/*where to put*/
MOV(R9,1);
reverse_start:
CMP(R8,0);
JUMP_EQ(revers_end);
MOV(R11,FPARG(R10));
MOV(FPARG(R10),FPARG(R9));
MOV(FPARG(R9),R11);
INCR(R9);
DECR(R10);
DECR(R8);
JUMP(reverse_start);
revers_end:
JUMPA(INDD(R7,2));
POP(FP);
RETURN;

    
    
    
L_LIST:/*DONE! IN SCHEME*/

L_MAP:
PUSH(FP);
MOV(FP,SP);
CMP(FPARG(1),IMM(2));
JUMP_LT(L_ERROR_INCORRECT_NUM_OF_ARGS);

MOV(R2,FPARG(1));
SUB(R2,IMM(1)); //number of lists
MOV(R7,IMM(0)); //number of elements in the list

L_MAP_MAIN_LOOP:
CMP(SOB_NIL,FPARG(3));
JUMP_EQ(L_MAP_MAIN_LOOP_FINISH);
INCR(R7);
PUSH(R7);
MOV(R4,IMM(0));
L_MAP_SEC_LOOP:

CMP(R4,R2);
JUMP_EQ(L_MAP_SEC_LOOP_DONE);
MOV(R5,R2);
SUB(R5,R4);
ADD(R5,IMM(2));
MOV(R6,FPARG(R5));
PUSH(INDD(R6,1)); //PUSH CAR
MOV(FPARG(R5),INDD(R6,2)); // MOV TO CDR
INCR(R4);
JUMP(L_MAP_SEC_LOOP);
L_MAP_SEC_LOOP_DONE:
PUSH(R2);
MOV(R1,FPARG(2)); // PROC R1
CMP(T_CLOSURE,IND(R1));
JUMP_NE(L_ERROR_INCORRECT_TYPE);
PUSH(INDD(R1,1));
CALLA(INDD(R1,2));
DROP(1);
POP(R2);
DROP(R2);
MOV(R2,FPARG(1));
SUB(R2,IMM(1)); //number of lists
POP(R7);
PUSH(R0); // PUSH THE RES
JUMP(L_MAP_MAIN_LOOP);
L_MAP_MAIN_LOOP_FINISH:
PUSH(SOB_NIL);
L_MAP__RET_LOOP:
CMP(R7,IMM(0));
JUMP_EQ(L_MAP_EXIT);
POP(R0);
POP(R1);
PUSH(R0);
PUSH(R1);
CALL(MAKE_SOB_PAIR);
DROP(2);
PUSH(R0);
DECR(R7);
JUMP(L_MAP__RET_LOOP);
L_MAP_EXIT:
POP(R0);
POP(FP);
RETURN;









L_APPEND:




































